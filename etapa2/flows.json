[
    {
        "id": "64ab4eb8dc279b95",
        "type": "tab",
        "label": "Fluxo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aa96dd3931ea2579",
        "type": "mqtt in",
        "z": "64ab4eb8dc279b95",
        "name": "",
        "topic": "esp32/temperatura",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "291bd1cf63a653b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 120,
        "wires": [
            [
                "0ace4cc8fbaf1650"
            ]
        ]
    },
    {
        "id": "92f7e242e5b45c8d",
        "type": "mqtt in",
        "z": "64ab4eb8dc279b95",
        "name": "",
        "topic": "esp32/umidade",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "291bd1cf63a653b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 280,
        "wires": [
            [
                "3edb8ccb7fce60f2"
            ]
        ]
    },
    {
        "id": "0ace4cc8fbaf1650",
        "type": "function",
        "z": "64ab4eb8dc279b95",
        "name": "parseTemperatura",
        "func": "\nlet ultima_temp = flow.get(\"ultima_temp\") || 999;\n\n// só envia se a diferença da última for de 0,5ºC\nif (Math.abs(ultima_temp - msg.payload) < 0.5) {\n    console.log('[temperatura] não enviou', msg.payload.toFixed(2));\n    return null;\n}\n\nflow.set(\"ultima_temp\", msg.payload);\n\nmsg.payload = { temperatura: msg.payload.toFixed(2) };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            [
                "6ec3f9eda22a28bc"
            ]
        ]
    },
    {
        "id": "6ec3f9eda22a28bc",
        "type": "mqtt out",
        "z": "64ab4eb8dc279b95",
        "name": "thingsboard",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7424ace1c4ee640d",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "3edb8ccb7fce60f2",
        "type": "function",
        "z": "64ab4eb8dc279b95",
        "name": "parseUmidade",
        "func": "let leituras = flow.get(\"leituras_umi\") || [];\n\nleituras.push(msg.payload);\n\nif (leituras.length > 10) {\n    leituras.shift();\n}\n\nflow.set(\"leituras_umi\", leituras);\n\nif (leituras.length !== 10) {\n    return null;\n}\n\nlet ultima_umi = flow.get(\"ultima_umi\") || 999;\n\nlet soma = leituras.reduce((a, b) => a + b, 0);\nlet media = soma / leituras.length;\nlet valor = 100 - (media / 4095) * 100;\n\nflow.set(\"leituras_umi\", []);\n\n// só envia se a diferença da última for de 2%\nif (Math.abs(ultima_umi - valor) < 2) {\n    console.log('[umidade] não enviou', valor.toFixed(2));\n    return null;\n}\n\nflow.set(\"ultima_umi\", valor);\nmsg.payload = { umidade: valor.toFixed(2) };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "6ec3f9eda22a28bc"
            ]
        ]
    },
    {
        "id": "291bd1cf63a653b3",
        "type": "mqtt-broker",
        "name": "projeto",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7424ace1c4ee640d",
        "type": "mqtt-broker",
        "name": "thingsboard",
        "broker": "demo.thingsboard.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]